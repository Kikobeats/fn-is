/**
 * fn-istype - Ask for a type, returns a true/false as answer.
 * @version v1.0.0
 * @link    https://github.com/Kikobeats/fn-istype
 * @license MIT
 */require=function r(t,e,n){function o(i,c){if(!e[i]){if(!t[i]){var a="function"==typeof require&&require;if(!c&&a)return a(i,!0);if(u)return u(i,!0);var p=new Error("Cannot find module '"+i+"'");throw p.code="MODULE_NOT_FOUND",p}var f=e[i]={exports:{}};t[i][0].call(f.exports,function(r){var e=t[i][1][r];return o(e?e:r)},f,f.exports,r,t,e,n)}return e[i].exports}for(var u="function"==typeof require&&require,i=0;i<n.length;i++)o(n[i]);return o}({1:[function(r,t,e){t.exports=function(r){return r.charAt(0).toUpperCase()+r.substring(1)},t.exports.words=function(r){return r.replace(/(^|[^a-zA-Z\u00C0-\u017F'])([a-zA-Z\u00C0-\u017F])/g,function(r){return r.toUpperCase()})}},{}],2:[function(r,t,e){"use strict";t.exports=function(r){var t=Array.prototype.slice.call(arguments,1);return function(){var e;return e=t.concat(Array.prototype.slice.call(arguments)),r.apply(this,e)}}},{}],3:[function(r,t,e){"use strict";var n=function(r){if(void 0===r||null===r)return String(r);var t={"[object Boolean]":"boolean","[object Number]":"number","[object String]":"string","[object Function]":"function","[object Array]":"array","[object Date]":"date","[object RegExp]":"regexp","[object Object]":"object"};return t[Object.prototype.toString.call(r)]};t.exports=n,t.exports.types=["array","boolean","date","function","number","object","regexp","string"]},{}],"fn-istype":[function(r,t,e){"use strict";var n=r("fn-typeof"),o=r("fn-partial"),u=r("capitalize"),i=function(r,t){return n(r)===t},c=function(r,t){return i(t,r)};t.exports=i,n.types.forEach(function(r){t.exports[r]=t.exports[u(r)]=o(c,r)})},{capitalize:1,"fn-partial":2,"fn-typeof":3}]},{},[]);